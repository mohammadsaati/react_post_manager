{"ast":null,"code":"import _defineProperty from \"C:\\\\xampp\\\\htdocs\\\\react_cms\\\\clinet\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:\\\\xampp\\\\htdocs\\\\react_cms\\\\clinet\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\react_cms\\\\clinet\\\\src\\\\components\\\\layout\\\\PostForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useContext } from 'react';\nimport Categories from '../Categories';\nimport axios from 'axios';\nimport AlertContext from '../../context/alert/alertContext';\n\nconst PostForm = ({\n  user_id\n}) => {\n  const alertContext = useContext(AlertContext);\n  const setAlert = alertContext.setAlert;\n\n  const _useState = useState({\n    title: '',\n    discription: '',\n    status: '',\n    cat_id: 1,\n    user_id: user_id\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        post = _useState2[0],\n        setPost = _useState2[1];\n\n  const title = post.title,\n        discription = post.discription,\n        status = post.status,\n        cat_id = post.cat_id;\n\n  const onChange = e => setPost(_objectSpread({}, post, {\n    [e.target.name]: e.target.value\n  }));\n\n  const onClick = e => {\n    if (e.target.classList.contains('my_items')) {\n      const itemValue = e.target.parentNode.value;\n      const getIdArray = itemValue.split('_');\n      const getId = getIdArray[0]; //Set category id\n\n      setPost(_objectSpread({}, post, {\n        cat_id: getId\n      }));\n    }\n  };\n\n  const saveNewPost = async () => {\n    const postresponse = await axios.get(\"http://localhost/react_cms/api/posts/addPost.php?\\n            user_id=\".concat(user_id, \"&\\n            cat_id=\").concat(cat_id, \"&\\n            title=\").concat(title, \"&\\n            discription=\").concat(discription, \"&\\n            status=\").concat(status));\n  };\n\n  const onSubmit = e => {\n    e.preventDefault();\n    console.log(post);\n\n    if (title != '' & discription != '') {\n      saveNewPost();\n    } else {\n      setAlert('WOOPS! Please fill out all the inputs', 'warning');\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"card\",\n    style: {\n      padding: '15px'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    for: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, \"Post title : \"), React.createElement(\"input\", {\n    type: \"text\",\n    className: \"form-control\",\n    name: \"title\",\n    value: title,\n    onChange: onChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    for: \"discription\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Post discription : \"), React.createElement(\"textarea\", {\n    className: \"form-control\",\n    style: {\n      height: '200px'\n    },\n    value: discription,\n    onChange: onChange,\n    required: true,\n    name: \"discription\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), React.createElement(\"dv\", {\n    className: \"form-group\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, React.createElement(Categories, {\n    onClick: onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"form-check form-check-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"status\",\n    name: \"status\",\n    value: \"visible\",\n    onChange: onChange,\n    className: \"form-chech-input\",\n    checked: status == 'visible',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    for: \"status\",\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"\\xA0visible\")), \"\\xA0\\xA0\\xA0\\xA0\\xA0\\xA0\", React.createElement(\"div\", {\n    className: \"form-check form-check-inline\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"radio\",\n    id: \"status\",\n    name: \"status\",\n    value: \"invisible\",\n    onChange: onChange,\n    className: \"form-chech-input\",\n    checked: status == 'invisible',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(\"label\", {\n    for: \"status\",\n    className: \"form-check-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"\\xA0invisible\")), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"submit\",\n    value: \"Save post\",\n    className: \"btn btn-outline-warning\",\n    style: {\n      width: '100%'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:\\xampp\\htdocs\\react_cms\\clinet\\src\\components\\layout\\PostForm.js"],"names":["React","useState","useContext","Categories","axios","AlertContext","PostForm","user_id","alertContext","setAlert","title","discription","status","cat_id","post","setPost","onChange","e","target","name","value","onClick","classList","contains","itemValue","parentNode","getIdArray","split","getId","saveNewPost","postresponse","get","onSubmit","preventDefault","console","log","padding","height","width"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAiBC,QAAjB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,OAAOC,UAAP,MAAuB,eAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,kCAAzB;;AAGA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAiB;AAC9B,QAAMC,YAAY,GAAGN,UAAU,CAACG,YAAD,CAA/B;AAD8B,QAEtBI,QAFsB,GAETD,YAFS,CAEtBC,QAFsB;;AAAA,oBAGLR,QAAQ,CAAC;AAC9BS,IAAAA,KAAK,EAAG,EADsB;AAE9BC,IAAAA,WAAW,EAAG,EAFgB;AAG9BC,IAAAA,MAAM,EAAG,EAHqB;AAI9BC,IAAAA,MAAM,EAAG,CAJqB;AAK9BN,IAAAA,OAAO,EAAGA;AALoB,GAAD,CAHH;AAAA;AAAA,QAGvBO,IAHuB;AAAA,QAGhBC,OAHgB;;AAAA,QAWtBL,KAXsB,GAWoBI,IAXpB,CAWtBJ,KAXsB;AAAA,QAWdC,WAXc,GAWoBG,IAXpB,CAWdH,WAXc;AAAA,QAWAC,MAXA,GAWoBE,IAXpB,CAWAF,MAXA;AAAA,QAWSC,MAXT,GAWoBC,IAXpB,CAWSD,MAXT;;AAY9B,QAAMG,QAAQ,GAAGC,CAAC,IAAIF,OAAO,mBAAKD,IAAL;AAAY,KAACG,CAAC,CAACC,MAAF,CAASC,IAAV,GAAgBF,CAAC,CAACC,MAAF,CAASE;AAArC,KAA7B;;AAEA,QAAMC,OAAO,GAAGJ,CAAC,IAAG;AAChB,QAAGA,CAAC,CAACC,MAAF,CAASI,SAAT,CAAmBC,QAAnB,CAA4B,UAA5B,CAAH,EAA4C;AAC1C,YAAMC,SAAS,GAAGP,CAAC,CAACC,MAAF,CAASO,UAAT,CAAoBL,KAAtC;AAEA,YAAMM,UAAU,GAAGF,SAAS,CAACG,KAAV,CAAgB,GAAhB,CAAnB;AACA,YAAMC,KAAK,GAAGF,UAAU,CAAC,CAAD,CAAxB,CAJ0C,CAM1C;;AACAX,MAAAA,OAAO,mBAAKD,IAAL;AAAYD,QAAAA,MAAM,EAACe;AAAnB,SAAP;AACD;AACF,GAVH;;AAYE,QAAMC,WAAW,GAAG,YAAY;AAE9B,UAAMC,YAAY,GAAG,MAAM1B,KAAK,CAAC2B,GAAN,kFACbxB,OADa,mCAEdM,MAFc,kCAGfH,KAHe,wCAITC,WAJS,mCAKdC,MALc,EAA3B;AAMD,GARD;;AAUA,QAAMoB,QAAQ,GAAGf,CAAC,IAAI;AACpBA,IAAAA,CAAC,CAACgB,cAAF;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYrB,IAAZ;;AACD,QAAGJ,KAAK,IAAE,EAAP,GAAWC,WAAW,IAAE,EAA3B,EAA+B;AAC1BkB,MAAAA,WAAW;AACf,KAFD,MAEO;AACHpB,MAAAA,QAAQ,CAAC,uCAAD,EAA2C,SAA3C,CAAR;AACH;AACH,GARC;;AAUF,SACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAE;AAAC2B,MAAAA,OAAO,EAAC;AAAT,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAM,IAAA,QAAQ,EAAEJ,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,GAAG,EAAC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAoB,IAAA,SAAS,EAAC,cAA9B;AAA6C,IAAA,IAAI,EAAC,OAAlD;AAA0D,IAAA,KAAK,EAAGtB,KAAlE;AAA0E,IAAA,QAAQ,EAAGM,QAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ,EAMI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,GAAG,EAAC,aAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADJ,EAEI;AAAU,IAAA,SAAS,EAAC,cAApB;AAAmC,IAAA,KAAK,EAAE;AAACqB,MAAAA,MAAM,EAAC;AAAR,KAA1C;AAA4D,IAAA,KAAK,EAAG1B,WAApE;AAAkF,IAAA,QAAQ,EAAGK,QAA7F;AAAwG,IAAA,QAAQ,MAAhH;AAAiH,IAAA,IAAI,EAAC,aAAtH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CANJ,EAWI;AAAI,IAAA,SAAS,EAAC,YAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAEK,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAXJ,EAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfJ,EAgBI;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,EAAE,EAAC,QAAvB;AAAgC,IAAA,IAAI,EAAC,QAArC;AAA8C,IAAA,KAAK,EAAC,SAApD;AACA,IAAA,QAAQ,EAAEL,QADV;AACoB,IAAA,SAAS,EAAC,kBAD9B;AACiD,IAAA,OAAO,EAAEJ,MAAM,IAAI,SADpE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI;AAAO,IAAA,GAAG,EAAC,QAAX;AAAoB,IAAA,SAAS,EAAC,kBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAHJ,CAhBJ,8BAuBI;AAAK,IAAA,SAAS,EAAC,8BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,EAAE,EAAC,QAAvB;AAAgC,IAAA,IAAI,EAAC,QAArC;AAA8C,IAAA,KAAK,EAAC,WAApD;AACA,IAAA,QAAQ,EAAEI,QADV;AACoB,IAAA,SAAS,EAAC,kBAD9B;AACiD,IAAA,OAAO,EAAGJ,MAAM,IAAI,WADrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADL,EAGI;AAAO,IAAA,GAAG,EAAC,QAAX;AAAoB,IAAA,SAAS,EAAC,kBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAHJ,CAvBJ,EA4BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA5BJ,EA6BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BJ,EA+BI;AAAO,IAAA,IAAI,EAAC,QAAZ;AAAqB,IAAA,KAAK,EAAC,WAA3B;AAAuC,IAAA,SAAS,EAAC,yBAAjD;AAA2E,IAAA,KAAK,EAAE;AAAC0B,MAAAA,KAAK,EAAC;AAAP,KAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BJ,CADJ,CADJ;AAqCH,CAnFD;;AAqFA,eAAehC,QAAf","sourcesContent":["import React , { useState , useContext } from 'react';\r\nimport Categories from '../Categories';\r\nimport axios from 'axios';\r\nimport AlertContext from '../../context/alert/alertContext';\r\n\r\n\r\nconst PostForm = ({ user_id }) => {\r\n    const alertContext = useContext(AlertContext);\r\n    const { setAlert } = alertContext;\r\n    const [post , setPost] = useState({\r\n        title : '',\r\n        discription : '',\r\n        status : '',\r\n        cat_id : 1,\r\n        user_id : user_id\r\n    });\r\n\r\n    const { title , discription , status , cat_id } = post;\r\n    const onChange = e => setPost({...post , [e.target.name]:e.target.value});\r\n\r\n    const onClick = e =>{\r\n        if(e.target.classList.contains('my_items')) {\r\n          const itemValue = e.target.parentNode.value;\r\n          \r\n          const getIdArray = itemValue.split('_');\r\n          const getId = getIdArray[0];\r\n          \r\n          //Set category id\r\n          setPost({...post , cat_id:getId});\r\n        }\r\n      }\r\n\r\n      const saveNewPost = async () => {\r\n        \r\n        const postresponse = await axios.get(`http://localhost/react_cms/api/posts/addPost.php?\r\n            user_id=${user_id}&\r\n            cat_id=${cat_id}&\r\n            title=${title}&\r\n            discription=${discription}&\r\n            status=${status}`);\r\n      }\r\n\r\n      const onSubmit = e => {\r\n        e.preventDefault();\r\n        console.log(post);\r\n       if(title!='' &discription!='') {\r\n            saveNewPost();\r\n       } else {\r\n           setAlert('WOOPS! Please fill out all the inputs' , 'warning');\r\n       }\r\n    }\r\n\r\n    return (\r\n        <div className=\"card\" style={{padding:'15px'}}>\r\n            <form onSubmit={onSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label for=\"title\">Post title : </label>\r\n                    <input type=\"text\"  className=\"form-control\" name=\"title\" value={ title } onChange={ onChange } />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label for=\"discription\">Post discription : </label>\r\n                    <textarea className=\"form-control\" style={{height:'200px'}} value={ discription } onChange={ onChange } required name=\"discription\"></textarea>\r\n                </div>\r\n\r\n                <dv className=\"form-group\">\r\n                    \r\n                    <Categories onClick={onClick} />\r\n                </dv>\r\n                <br/>\r\n                <div className=\"form-check form-check-inline\">\r\n                    <input type=\"radio\" id=\"status\" name=\"status\" value='visible' \r\n                    onChange={onChange} className=\"form-chech-input\" checked={status == 'visible'} />\r\n                    <label for=\"status\" className=\"form-check-label\">&nbsp;visible</label>\r\n                  \r\n                </div>\r\n                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n                <div className=\"form-check form-check-inline\">\r\n                     <input type=\"radio\" id=\"status\" name=\"status\" value='invisible'\r\n                     onChange={onChange} className=\"form-chech-input\" checked={ status == 'invisible' } />\r\n                    <label for=\"status\" className=\"form-check-label\">&nbsp;invisible</label>\r\n                </div>\r\n                <br/>\r\n                <br/>\r\n\r\n                <input type=\"submit\" value=\"Save post\" className=\"btn btn-outline-warning\" style={{width:'100%'}} />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostForm\r\n "]},"metadata":{},"sourceType":"module"}